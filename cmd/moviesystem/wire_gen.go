// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"database/sql"
	"github.com/google/wire"
	"monte_clone_go/internal/entity"
	"monte_clone_go/internal/event"
	"monte_clone_go/internal/infra/database"
	"monte_clone_go/internal/infra/web"
	"monte_clone_go/internal/usecase"
	"monte_clone_go/pkg/events"
)

import (
	_ "github.com/go-sql-driver/mysql"
)

// Injectors from wire.go:

// Função para criar o use case de criação de filme
func NewCreateMovieUseCase(db *sql.DB, eventDispatcher events.EventDispatcherInterface) *usecase.CreateMovieUseCase {
	movieRepository := database.NewMovieRepository(db)
	movieCreated := event.NewMovieCreated()
	createMovieUseCase := usecase.NewCreateMovieUseCase(movieRepository, movieCreated, eventDispatcher)
	return createMovieUseCase
}

// Função para criar o use case de obtenção de filme
func NewGetMovieUseCase(db *sql.DB) *usecase.GetMovieUseCase {
	movieRepository := database.NewMovieRepository(db)
	getMovieUseCase := usecase.NewGetMovieUseCase(movieRepository)
	return getMovieUseCase
}

// Função para criar o use case de atualização de filme
func NewUpdateMovieUseCase(db *sql.DB, eventDispatcher events.EventDispatcherInterface) *usecase.UpdateMovieUseCase {
	movieRepository := database.NewMovieRepository(db)
	movieUpdated := event.NewMovieUpdated()
	updateMovieUseCase := usecase.NewUpdateMovieUseCase(movieRepository, movieUpdated, eventDispatcher)
	return updateMovieUseCase
}

// Função para criar o use case de exclusão de filme
func NewDeleteMovieUseCase(db *sql.DB, eventDispatcher events.EventDispatcherInterface) *usecase.DeleteMovieUseCase {
	movieRepository := database.NewMovieRepository(db)
	movieDeleted := event.NewMovieDeleted()
	deleteMovieUseCase := usecase.NewDeleteMovieUseCase(movieRepository, movieDeleted, eventDispatcher)
	return deleteMovieUseCase
}

// Função para criar o WebMovieHandler
func NewWebMovieHandler(db *sql.DB, eventDispatcher events.EventDispatcherInterface) *web.WebMovieHandler {
	movieRepository := database.NewMovieRepository(db)
	movieCreated := event.NewMovieCreated()
	movieUpdated := event.NewMovieUpdated()
	movieDeleted := event.NewMovieDeleted()
	webMovieHandler := web.NewWebMovieHandler(eventDispatcher, movieRepository, movieCreated, movieUpdated, movieDeleted)
	return webMovieHandler
}

// wire.go:

// Conjuntos de dependências
var setMovieRepositoryDependency = wire.NewSet(database.NewMovieRepository, wire.Bind(new(entity.MovieRepositoryInterface), new(*database.MovieRepository)))

var setEventDispatcherDependency = wire.NewSet(events.NewEventDispatcher, wire.Bind(new(events.EventDispatcherInterface), new(*events.EventDispatcher)))

var setMovieCreatedEvent = wire.NewSet(event.NewMovieCreated, wire.Bind(new(event.MovieCreatedEvent), new(*event.MovieCreated)))

var setMovieUpdatedEvent = wire.NewSet(event.NewMovieUpdated, wire.Bind(new(event.MovieUpdatedEvent), new(*event.MovieUpdated)))

var setMovieDeletedEvent = wire.NewSet(event.NewMovieDeleted, wire.Bind(new(event.MovieDeletedEvent), new(*event.MovieDeleted)))
